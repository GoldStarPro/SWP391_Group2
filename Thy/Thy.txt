
Views -> Expertise

Models Expertise:

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;

#nullable disable

namespace HR_Management.Models
{
    public partial class Expertise
    {
        public Expertise()
        {
            Salarys = new HashSet<Salary>();
            Employees = new HashSet<Employee>();
        }


        [Key]
        public int Expertise_ID { get; set; }

        [Required(ErrorMessage = "Expertise Name is required.")]
        [MaxLength(50,ErrorMessage = "Expertise Name cannot be longer than 50 characters.")]
        public string Expertise_Name { get; set; }

        [MaxLength(100, ErrorMessage = "Notes cannot be more than 100 characters.")]
        public string Notes { get; set; }

        public virtual ICollection<Salary> Salarys { get; set; }
        public virtual ICollection<Employee> Employees { get; set; }
    }   
}



Index.cshtml:

@model IEnumerable<HR_Management.Models.Expertise>

@{
    ViewData["Title"] = "Expertise";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="d-sm-flex align-items-center justify-content-between mb-4">
    <h1 class="h3 mb-0 text-gray-800 font-weight-bold">Expertise List</h1>
    <ol class="breadcrumb">
        <li class="breadcrumb-item"><a asp-action="Index" asp-controller="Home">Home</a></li>
        <li class="breadcrumb-item">Expertise</li>
    </ol>
</div>
<div class="row">
    <div class="col-lg-12">
        <!-- DataTables -->
        <div class="card mb-4">
            <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                <h6 class="m-0 font-weight-bold text-primary">Expertises</h6>
                <a class="btn btn-success" asp-action="Create">Add New</a>
            </div>
            <div class="table-responsive p-3">
                <table class="table align-items-center table-flush" id="dataTable">
                    <thead class="thead-light">
                        <tr>
                            <th>ID</th>
                            <th>Expertise Name</th>
                            <th>Notes</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model)
                        {
                            <tr>
                                <td>@item.Expertise_ID</td>
                                <td>@item.Expertise_Name</td>
                                <td>@item.Notes</td>
                                <td>
                                    <div class="btn-group" role="group">
                                        <a class="btn btn-sm btn-primary mr-2" asp-action="Details" asp-route-id="@item.Expertise_ID" title="View">
                                            <i class="fa-solid fa-eye"></i>
                                        </a>
                                        <a class="btn btn-sm btn-danger" asp-action="Delete" asp-route-id="@item.Expertise_ID" title="Delete">
                                            <i class="fa-solid fa-trash"></i>
                                        </a>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
            <div class="card-footer"></div>
        </div>
    </div>
</div>
<!--Row-->



Create.cshtml:

@model HR_Management.Models.Expertise

@{
    ViewData["Title"] = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="d-sm-flex align-items-center justify-content-between mb-4">
    <h1 class="h3 mb-0 text-gray-800">Add A New Expertise</h1>
    <ol class="breadcrumb">
        <li class="breadcrumb-item"><a asp-action="Index" asp-controller="Home">Home</a></li>
        <li class="breadcrumb-item">Expertise</li>
        <li class="breadcrumb-item active" aria-current="page">Add New</li>
    </ol>
</div>

<div class="card mb-3">
    <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
        <h4 class="m-0 font-weight-bold text-primary">Add New Expertise</h4>
    </div>
    <div class="card-body">
        <div class="form-group">
            <div class="card-body">
                <form asp-action="Create">
                    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                    <div class="form-group">
                        <label asp-for="Expertise_Name" class="control-label">Expertise Name</label>
                        <input asp-for="Expertise_Name" class="form-control" />
                        <span asp-validation-for="Expertise_Name" class="text-danger"></span>
                    </div>
                    <div class="form-group">
                        <label asp-for="Notes" class="control-label">Notes</label>
                        <textarea asp-for="Notes" class="form-control"></textarea>
                        <span asp-validation-for="Notes" class="text-danger"></span>
                    </div>
                    <div class="form-group">
                        <input type="submit" value="Create" class="btn btn-primary" />
                        <a asp-action="Index" class="btn btn-secondary">Come Back</a>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>




Details.cshtml:

@model HR_Management.Models.Expertise

@{
    ViewData["Title"] = "Details";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="d-sm-flex align-items-center justify-content-between mb-4">
    <h1 class="h3 mb-0 text-gray-800">Expertise Details</h1>
    <ol class="breadcrumb">
        <li class="breadcrumb-item"><a asp-action="Index" asp-controller="Home">Home</a></li>
        <li class="breadcrumb-item">Expertise</li>
        <li class="breadcrumb-item active" aria-current="page">Details</li>
    </ol>
</div>

<div class="card mb-3">
    <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
        <h4 class="m-0 font-weight-bold text-primary">Expertise Details</h4>
    </div>
    <div class="card-body">
        <div class="form-group">
            <div class="card-body">
                <div class="form-group">
                    <label class="control-label">ID</label>
                    <input asp-for="@Model.Expertise_ID" disabled class="form-control" />
                </div>
                <div class="form-group">
                    <label class="control-label">Expertise Name</label>
                    <input asp-for="@Model.Expertise_Name" disabled class="form-control" />
                </div>
                <div class="form-group">
                    <label class="control-label">Notes</label>
                    <textarea asp-for="@Model.Notes" disabled class="form-control"></textarea>
                </div>
                <div class="form-group">
                    <a asp-action="Edit" asp-route-id="@Model.Expertise_ID" class="btn btn-primary">Edit info</a>
                    <a asp-action="Index" class="btn btn-secondary">Come Back</a>
                </div>
            </div>
        </div>
    </div>
</div>




Edit.cshtml:

@model HR_Management.Models.Expertise

@{
    ViewData["Title"] = "Edit";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="d-sm-flex align-items-center justify-content-between mb-4">
    <h1 class="h3 mb-0 text-gray-800">Edit Expertise</h1>
    <ol class="breadcrumb">
        <li class="breadcrumb-item"><a asp-action="Index" asp-controller="Home">Home</a></li>
        <li class="breadcrumb-item">Expertise</li>
        <li class="breadcrumb-item active" aria-current="page">Edit</li>
    </ol>
</div>

<div class="card mb-3">
    <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
        <h4 class="m-0 font-weight-bold text-primary">Edit Expertise</h4>
    </div>
    <div class="card-body">
        <div class="form-group">
            <div class="card-body">
                <form asp-action="Edit">
                    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                    <input type="hidden" asp-for="Expertise_ID" />
                    <div class="form-group">
                        <label asp-for="Expertise_Name" class="control-label">Expertise Name</label>
                        <input asp-for="Expertise_Name" class="form-control" />
                        <span asp-validation-for="Expertise_Name" class="text-danger"></span>
                    </div>
                    <div class="form-group">
                        <label asp-for="Notes" class="control-label">Notes</label>
                        <textarea asp-for="Notes" class="form-control"></textarea>
                        <span asp-validation-for="Notes" class="text-danger"></span>
                    </div>
                    <div class="form-group">
                        <input type="submit" value="Save" class="btn btn-primary" />
                        <a asp-action="Index" class="btn btn-secondary">Come Back</a>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>




Delete.cshtml:

@model HR_Management.Models.Expertise

@{
    ViewData["Title"] = "Delete Expertise";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container mt-5">
    <div class="card">
        <div class="card-header bg-danger text-white">
            <h1 class="h4">Delete Expertise</h1>
        </div>
        <div class="card-body">
            <h3 class="text-danger">Are you sure you want to delete this?</h3>
            <div class="my-4">
                <h4 class="text-primary"><strong>Expertise Details</strong></h4>
                <hr />
                <table class="table table-bordered">
                    <tbody>
                        <tr>
                            <th>@Html.DisplayNameFor(model => model.Expertise_Name)</th>
                            <td>@Html.DisplayFor(model => model.Expertise_Name)</td>
                        </tr>
                        <tr>
                            <th>@Html.DisplayNameFor(model => model.Notes)</th>
                            <td>@Html.DisplayFor(model => model.Notes)</td>
                        </tr>
                    </tbody>
                </table>
            </div>
            <form asp-action="Delete">
                <input type="hidden" asp-for="Expertise_ID" />
                <div class="form-group">
                    <button type="submit" class="btn btn-danger">Delete</button>
                    <a asp-action="Index" class="btn btn-secondary">Back to List</a>
                </div>
            </form>
        </div>
    </div>
</div>






ExpertiseController.cs:

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.EntityFrameworkCore;
using HR_Management.Models;

namespace HR_Management.Controllers
{
    public class ExpertiseController : Controller
    {
        private readonly HRManagementContext _context;

        public ExpertiseController(HRManagementContext context)
        {
            _context = context;
        }

        // GET: Expertise
        public async Task<IActionResult> Index()
        {
            return View(await _context.Expertises.ToListAsync());
        }

        // GET: ChuyenMon/Details/:id
        public async Task<IActionResult> Details(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var expertise = await _context.Expertises
                .FirstOrDefaultAsync(m => m.Expertise_ID == id);
            if (expertise == null)
            {
                return NotFound();
            }

            return View(expertise);
        }

        // GET: Expertise/Create
        public IActionResult Create()
        {
            return View();
        }

        // POST: Expertise/Create
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Create([Bind("Expertise_ID,Expertise_Name,Notes")] Expertise expertise)
        {
            if (ModelState.IsValid)
            {
                _context.Add(expertise);
                await _context.SaveChangesAsync();
                return RedirectToAction(nameof(Index));
            }
            return View(expertise);
        }

        // GET: Expertise/Edit/:id
        public async Task<IActionResult> Edit(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var expertise = await _context.Expertises.FindAsync(id);
            if (expertise == null)
            {
                return NotFound();
            }
            return View(expertise);
        }

        // POST: Expertise/Edit/:id
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Edit(int id, [Bind("Expertise_ID,Expertise_Name,Notes")] Expertise expertise)
        {
            if (id != expertise.Expertise_ID)
            {
                return NotFound();
            }

            if (ModelState.IsValid)
            {
                try
                {
                    _context.Update(expertise);
                    await _context.SaveChangesAsync();
                }
                catch (DbUpdateConcurrencyException)
                {
                    if (!ExpertiseExists(expertise.Expertise_ID))
                    {
                        return NotFound();
                    }
                    else
                    {
                        throw;
                    }
                }
                return RedirectToAction(nameof(Index));
            }
            return View(expertise);
        }

        // GET: Expertise/Delete/:id
        public async Task<IActionResult> Delete(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var expertise = await _context.Expertises
                .FirstOrDefaultAsync(m => m.Expertise_ID == id);
            if (expertise == null)
            {
                return NotFound();
            }

            return View(expertise);
        }

        // POST: Expertise/Delete/:id
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> DeleteConfirmed(int id)
        {
            var expertise = await _context.Expertises.FindAsync(id);
            _context.Expertises.Remove(expertise);
            await _context.SaveChangesAsync();
            return RedirectToAction(nameof(Index));
        }

        private bool ExpertiseExists(int id)
        {
            return _context.Expertises.Any(e => e.Expertise_ID == id);
        }
    }
}
